	package org.ethereum.net;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.ethereum.net.message.BlockHashesMessage;
import org.ethereum.net.message.Command;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;

import java.util.Arrays;

public class BlockHashesMessageTest {

    /* BLOCK_HASHES_MESSAGE */
    
    @Test /* BlockHashesMessage 1 from network */
    public void test_1() {
    	
    	String blockHashesMessageRaw = "";
    	
        byte[] payload = Hex.decode(blockHashesMessageRaw);
        BlockHashesMessage blockHashesMessage = new BlockHashesMessage(payload);
        System.out.println(blockHashesMessage);
        
        assertEquals(Command.BLOCK_HASHES, blockHashesMessage.getCommand());
        assertEquals(128, blockHashesMessage.getBlockHashes().size());
        // TODO maybe also assert values for individual hashes
        assertEquals(null, blockHashesMessage.getAnswerMessage());
    }
    
    @Test /* BlockHashesMessage 2 from new */
    public void test_2() {
    	List<byte[]> blockHashes = Arrays.asList(
			Hex.decode("4ee6424d776b3f59affc20bc2de59e67f36e22cc07897ff8df152242c921716b"),
			Hex.decode("7d2fe4df0dbbc9011da2b3bf177f0c6b7e71a11c509035c5d751efa5cf9b4817")
    	);
        BlockHashesMessage blockHashesMessage = new BlockHashesMessage(blockHashes);
        System.out.println(blockHashesMessage);
        
        String expected = "f84314a04ee6424d776b3f59affc20bc2de59e67f36e22cc07897ff8df152242c921716ba07d2fe4df0dbbc9011da2b3bf177f0c6b7e71a11c509035c5d751efa5cf9b4817";
    	assertEquals(expected, Hex.toHexString(blockHashesMessage.getEncoded()));
    	
        assertEquals(Command.BLOCK_HASHES, blockHashesMessage.getCommand());
        assertEquals(2, blockHashesMessage.getBlockHashes().size());
        // TODO maybe also assert values for individual hashes
        assertEquals(null, blockHashesMessage.getAnswerMessage());
    }
}
